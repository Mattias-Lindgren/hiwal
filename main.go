package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"strconv"
	"strings"

	color "github.com/fatih/color"
	colors "github.com/teacat/noire"
)

func main() {
	fmt.Println()
	args := os.Args[1:]
	if len(args) < 1 {
		printLine("Usage: hiwal [FILE]", color.FgHiGreen)
		fmt.Println(" " + "Target color.json generated by pywal to generate ")
		fmt.Println(" " + "highlight colors from the existing 8 colors.")
		fmt.Println()
		fmt.Println(" " + "default path: ~/.cache/wal/colors.json")
		return
	}

	//homeDir, _ := os.UserHomeDir()
	filePath := string(args[0])
	jsonFile, err := os.Open(filePath)

	if err != nil {
		printError(err.Error())
		return
	}

	defer jsonFile.Close()

	byteValue, _ := ioutil.ReadAll(jsonFile)

	var result colorScheme
	json.Unmarshal([]byte(byteValue), &result)

	wallpaper := strings.SplitAfter(result.Wallpaper, string('/'))
	printLine("Wallpaper: "+wallpaper[len(wallpaper)-1], color.FgGreen)
	printLine("Generating brighter colors", color.FgGreen)

	for key := range result.Colors {
		test := strings.SplitAfter(key, "color")
		n, _ := strconv.ParseInt(test[len(test)-1], 10, 64)
		if n > 8 {
			base_color := fmt.Sprint(n - 8)
			result.Colors[key] = "#" + colors.
				NewHex(result.Colors["color"+base_color]).
				AdjustHue(-5).
				Lighten(0.25).
				Desaturate(0.1).
				Hex()
			fmt.Println("     " + key)
		}
	}

	result.Colors["color8"] = "#" + colors.NewHex(result.Colors["color0"]).Lighten(0.05).Hex()
	result.Special["cursor"] = "#" + colors.NewHex(result.Colors["color3"]).Lighten(0.15).Saturate(0.1).Hex()

	printLine("Done!", color.FgGreen)

	bytes, _ := json.MarshalIndent(result, "", "")
	_ = ioutil.WriteFile(filePath, bytes, 0644)
}

func printLine(text string, c color.Attribute) {
	col := color.New(c).Add(color.Bold)
	col.Print(":: ")
	col = color.New(color.FgWhite)
	col.Print(text)
	col.Println()
}

func printError(text string) {
	col := color.New(color.FgHiRed).Add(color.Bold)
	col.Print(":: ")
	col = color.New(color.FgRed).Add(color.Bold)
	col.Print(text)
	col.Println()
}

type colorScheme struct {
	Wallpaper string            `json:"wallpaper"`
	Special   map[string]string `json:"special"`
	Colors    map[string]string `json:"colors"`
}
